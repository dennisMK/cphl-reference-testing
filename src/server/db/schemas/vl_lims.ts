import {
  mysqlTable,
  varchar,
  timestamp,
  int,
  text,
  tinyint,
  date,
  datetime,
  longtext,
  smallint,
} from "drizzle-orm/mysql-core";

// VL Patients table from etest_vl_lims database - matches actual database schema
export const vl_patients = mysqlTable("vl_patients", {
  id: int("id").primaryKey().autoincrement(),
  unique_id: varchar("unique_id", { length: 128 }),
  art_number: varchar("art_number", { length: 64 }),
  other_id: varchar("other_id", { length: 64 }),
  gender: varchar("gender", { length: 1 }),
  dob: date("dob"),
  created_at: datetime("created_at", { mode: "date", fsp: 6 }).notNull(),
  updated_at: datetime("updated_at", { mode: "date", fsp: 6 }).notNull(),
  created_by_id: int("created_by_id").notNull(),
  facility_id: int("facility_id").notNull(),
  treatment_initiation_date: date("treatment_initiation_date"),
  current_regimen_initiation_date: date("current_regimen_initiation_date"),
  treatment_duration: smallint("treatment_duration"),
  previous_results: longtext("previous_results"),
  parent_id: int("parent_id").default(0),
  is_verified: tinyint("is_verified").default(1),
  is_the_clean_patient: int("is_the_clean_patient").notNull().default(0),
  facility_patient_id: int("facility_patient_id"),
  sanitized_art_number: varchar("sanitized_art_number", { length: 64 }),
  is_cleaned: tinyint("is_cleaned").default(0),
});

// VL Samples table from etest_vl_lims database - matches actual database schema
export const vl_samples = mysqlTable("vl_samples", {
  id: int("id").primaryKey().autoincrement(),
  patient_unique_id: varchar("patient_unique_id", { length: 128 }),
  locator_category: varchar("locator_category", { length: 1 }),
  locator_position: varchar("locator_position", { length: 4 }),
  vl_sample_id: varchar("vl_sample_id", { length: 128 }),
  form_number: varchar("form_number", { length: 64 }),
  pregnant: varchar("pregnant", { length: 1 }),
  anc_number: varchar("anc_number", { length: 64 }),
  breast_feeding: varchar("breast_feeding", { length: 1 }),
  consented_sample_keeping: varchar("consented_sample_keeping", { length: 1 }),
  active_tb_status: varchar("active_tb_status", { length: 1 }),
  date_collected: date("date_collected"),
  date_received: datetime("date_received", { mode: "date" }),
  treatment_initiation_date: date("treatment_initiation_date"),
  sample_type: varchar("sample_type", { length: 1 }),
  treatment_indication_other: varchar("treatment_indication_other", { length: 64 }),
  last_test_date: date("last_test_date"),
  last_value: varchar("last_value", { length: 64 }),
  last_sample_type: varchar("last_sample_type", { length: 1 }),
  verified: tinyint("verified").notNull().default(1),
  in_worksheet: tinyint("in_worksheet"),
  data_entered_by_id: int("data_entered_by_id"),
  data_entered_at: datetime("data_entered_at", { mode: "date", fsp: 6 }),
  created_at: datetime("created_at", { mode: "date", fsp: 6 }).notNull(),
  updated_at: datetime("updated_at", { mode: "date", fsp: 6 }).notNull(),
  arv_adherence_id: int("arv_adherence_id"),
  created_by_id: int("created_by_id"),
  current_regimen_id: int("current_regimen_id"),
  facility_id: int("facility_id"),
  data_facility_id: int("data_facility_id"),
  facility_patient_id: int("facility_patient_id"),
  failure_reason_id: int("failure_reason_id"),
  patient_id: int("patient_id"),
  tb_treatment_phase_id: int("tb_treatment_phase_id"),
  treatment_indication_id: int("treatment_indication_id"),
  treatment_line_id: int("treatment_line_id"),
  updated_by_id: int("updated_by_id"),
  verifier_id: int("verifier_id"),
  verified_at: datetime("verified_at", { mode: "date" }),
  viral_load_testing_id: int("viral_load_testing_id"),
  envelope_id: int("envelope_id"),
  other_regimen: varchar("other_regimen", { length: 128 }),
  clinician_id: int("clinician_id"),
  lab_tech_id: int("lab_tech_id"),
  treatment_duration: smallint("treatment_duration"),
  treatment_care_approach: smallint("treatment_care_approach"),
  current_who_stage: smallint("current_who_stage"),
  is_study_sample: tinyint("is_study_sample").notNull().default(0),
  barcode: varchar("barcode", { length: 250 }),
  original_patient_id: int("original_patient_id").default(0),
  barcode2: varchar("barcode2", { length: 250 }),
  barcode3: varchar("barcode3", { length: 250 }),
  barcode4: varchar("barcode4", { length: 250 }),
  barcode5: varchar("barcode5", { length: 250 }),
  sample_reception_id: int("sample_reception_id"),
  tracking_code_id: int("tracking_code_id"),
  is_data_entered: tinyint("is_data_entered").notNull().default(0),
  facility_reference: varchar("facility_reference", { length: 128 }),
  reception_art_number: varchar("reception_art_number", { length: 40 }),
  data_art_number: varchar("data_art_number", { length: 40 }),
  stage: tinyint("stage"),
  required_verification: tinyint("required_verification").notNull(),
  current_regimen_initiation_date: date("current_regimen_initiation_date"),
  hie_data_created_at: datetime("hie_data_created_at", { mode: "date" }),
  study_id: int("study_id"),
  received_by_id: int("received_by_id"),
  study_participant_id: int("study_participant_id"),
  source_system: int("source_system"),
  duration_on_current_txt: tinyint("duration_on_current_txt"),
  date_centrifuged: datetime("date_centrifuged", { mode: "date" }),
  patient_phone_number: varchar("patient_phone_number", { length: 20 }),
  requested_on: date("requested_on"),
  only_sample_received: tinyint("only_sample_received"),
  agent_id: varchar("agent_id", { length: 255 }),
  
  // Additional fields that might contain result data
  viral_load_result: varchar("viral_load_result", { length: 64 }),
  detection_status: varchar("detection_status", { length: 32 }),
  interpretation: varchar("interpretation", { length: 64 }),
  test_method: varchar("test_method", { length: 128 }),
  instrument: varchar("instrument", { length: 128 }),
  batch_number: varchar("batch_number", { length: 64 }),
});

// TypeScript types for the VL LIMS tables
export type VlPatient = typeof vl_patients.$inferSelect;
export type NewVlPatient = typeof vl_patients.$inferInsert;

export type VlSample = typeof vl_samples.$inferSelect;
export type NewVlSample = typeof vl_samples.$inferInsert; 