import { mysqlTable, mysqlSchema, int, varchar, timestamp, index, foreignKey, unique, datetime, date, smallint, longtext, tinyint } from "drizzle-orm/mysql-core"
import { sql } from "drizzle-orm"
import type { AnyMySqlColumn } from "drizzle-orm/mysql-core"

export const backendDistricts = mysqlTable("backend_districts", {
	id: int().autoincrement().notNull(),
	district: varchar({ length: 32 }).notNull(),
	mapCode: varchar("map_code", { length: 64 }),
	regionId: int("region_id"),
	dhis2Uid: varchar("dhis2_uid", { length: 128 }),
	createdAt: timestamp("created_at", { mode: 'string' }),
	updatedAt: timestamp("updated_at", { mode: 'string' }),
});

export const backendFacilities = mysqlTable("backend_facilities", {
	id: int().autoincrement().notNull(),
	facility: varchar({ length: 128 }).notNull(),
	hubFacility: tinyint("hub_facility").notNull(),
	facilityContact: varchar("facility_contact", { length: 64 }),
	facilityEmail: varchar("facility_email", { length: 128 }),
	physicalAddress: varchar("physical_address", { length: 128 }),
	returnAddress: varchar("return_address", { length: 128 }),
	coordinatorName: varchar("coordinator_name", { length: 64 }),
	coordinatorContact: varchar("coordinator_contact", { length: 64 }),
	coordinatorEmail: varchar("coordinator_email", { length: 128 }),
	active: tinyint().notNull(),
	districtId: int("district_id").references(() => backendDistricts.id, { onDelete: "restrict", onUpdate: "restrict" } ),
	hubId: int("hub_id").references(() => backendHubs.id, { onDelete: "restrict", onUpdate: "restrict" } ),
	ipId: int("ip_id"),
	dhis2Name: varchar("dhis2_name", { length: 128 }),
	dhis2Uid: varchar("dhis2_uid", { length: 128 }),
	isCleaned: tinyint("is_cleaned").default(0).notNull(),
	createdAt: timestamp("created_at", { mode: 'string' }),
	updatedAt: timestamp("updated_at", { mode: 'string' }),
	hiePartially: tinyint("hie_partially").default(0),
	hieFully: tinyint("hie_fully").default(0),
},
(table) => [
	index("backend_facilities_97469368").on(table.hubId),
	index("backend_facilities_dhis2_uid").on(table.dhis2Uid),
	unique("backend_facilities_facility_4fe8b8cb_uniq").on(table.facility),
]);

export const backendHubs = mysqlTable("backend_hubs", {
	id: int().autoincrement().notNull(),
	hub: varchar({ length: 32 }).notNull(),
	hubEmail: varchar("hub_email", { length: 128 }),
	coordinatorName: varchar("coordinator_name", { length: 64 }),
	coordinatorContact: varchar("coordinator_contact", { length: 64 }),
	coordinatorEmail: varchar("coordinator_email", { length: 128 }),
	active: tinyint().notNull(),
	ipId: int("ip_id"),
	createdAt: timestamp("created_at", { mode: 'string' }),
	updatedAt: timestamp("updated_at", { mode: 'string' }),
});

export const vlClinicians = mysqlTable("vl_clinicians", {
	id: int().autoincrement().notNull(),
	cname: varchar({ length: 128 }).notNull(),
	cphone: varchar({ length: 64 }),
	facilityId: int("facility_id").notNull().references(() => backendFacilities.id, { onDelete: "restrict", onUpdate: "restrict" } ),
	createdAt: datetime("created_at", { mode: 'string'}),
	updatedAt: datetime("updated_at", { mode: 'string'}),
},
(table) => [
	unique("vl_clinicians_facility_id_0aba4c74_uniq").on(table.facilityId, table.cname),
]);

export const vlPatients = mysqlTable("vl_patients", {
	id: int().autoincrement().notNull(),
	uniqueId: varchar("unique_id", { length: 128 }),
	artNumber: varchar("art_number", { length: 64 }),
	otherId: varchar("other_id", { length: 64 }),
	gender: varchar({ length: 1 }),
	// you can use { mode: 'date' }, if you want to have Date as type for this column
	dob: date({ mode: 'string' }),
	createdAt: datetime("created_at", { mode: 'string', fsp: 6 }).notNull(),
	updatedAt: datetime("updated_at", { mode: 'string', fsp: 6 }).notNull(),
	createdById: int("created_by_id").notNull(),
	facilityId: int("facility_id").notNull(),
	// you can use { mode: 'date' }, if you want to have Date as type for this column
	treatmentInitiationDate: date("treatment_initiation_date", { mode: 'string' }),
	// you can use { mode: 'date' }, if you want to have Date as type for this column
	currentRegimenInitiationDate: date("current_regimen_initiation_date", { mode: 'string' }),
	treatmentDuration: smallint("treatment_duration"),
	previousResults: longtext("previous_results"),
	parentId: int("parent_id").default(0),
	isVerified: tinyint("is_verified").default(1),
	isTheCleanPatient: int("is_the_clean_patient").default(0).notNull(),
	facilityPatientId: int("facility_patient_id"),
	sanitizedArtNumber: varchar("sanitized_art_number", { length: 64 }),
	isCleaned: tinyint("is_cleaned").default(0),
});

export const vlSamples = mysqlTable("vl_samples", {
	id: int().autoincrement().notNull(),
	patientUniqueId: varchar("patient_unique_id", { length: 128 }),
	locatorCategory: varchar("locator_category", { length: 1 }),
	locatorPosition: varchar("locator_position", { length: 4 }),
	vlSampleId: varchar("vl_sample_id", { length: 128 }),
	formNumber: varchar("form_number", { length: 64 }),
	pregnant: varchar({ length: 1 }),
	ancNumber: varchar("anc_number", { length: 64 }),
	breastFeeding: varchar("breast_feeding", { length: 1 }),
	consentedSampleKeeping: varchar("consented_sample_keeping", { length: 1 }),
	activeTbStatus: varchar("active_tb_status", { length: 1 }),
	// you can use { mode: 'date' }, if you want to have Date as type for this column
	dateCollected: date("date_collected", { mode: 'string' }),
	dateReceived: datetime("date_received", { mode: 'string'}),
	// you can use { mode: 'date' }, if you want to have Date as type for this column
	treatmentInitiationDate: date("treatment_initiation_date", { mode: 'string' }),
	sampleType: varchar("sample_type", { length: 1 }),
	treatmentIndicationOther: varchar("treatment_indication_other", { length: 64 }),
	// you can use { mode: 'date' }, if you want to have Date as type for this column
	lastTestDate: date("last_test_date", { mode: 'string' }),
	lastValue: varchar("last_value", { length: 64 }),
	lastSampleType: varchar("last_sample_type", { length: 1 }),
	verified: tinyint().default(1).notNull(),
	inWorksheet: tinyint("in_worksheet"),
	dataEnteredById: int("data_entered_by_id"),
	dataEnteredAt: datetime("data_entered_at", { mode: 'string', fsp: 6 }),
	createdAt: datetime("created_at", { mode: 'string', fsp: 6 }).notNull(),
	updatedAt: datetime("updated_at", { mode: 'string', fsp: 6 }).notNull(),
	arvAdherenceId: int("arv_adherence_id"),
	createdById: int("created_by_id"),
	currentRegimenId: int("current_regimen_id"),
	facilityId: int("facility_id"),
	dataFacilityId: int("data_facility_id"),
	facilityPatientId: int("facility_patient_id"),
	failureReasonId: int("failure_reason_id"),
	patientId: int("patient_id"),
	tbTreatmentPhaseId: int("tb_treatment_phase_id"),
	treatmentIndicationId: int("treatment_indication_id"),
	treatmentLineId: int("treatment_line_id"),
	updatedById: int("updated_by_id"),
	verifierId: int("verifier_id"),
	verifiedAt: datetime("verified_at", { mode: 'string'}),
	viralLoadTestingId: int("viral_load_testing_id"),
	envelopeId: int("envelope_id"),
	otherRegimen: varchar("other_regimen", { length: 128 }),
	clinicianId: int("clinician_id"),
	labTechId: int("lab_tech_id"),
	treatmentDuration: smallint("treatment_duration"),
	treatmentCareApproach: smallint("treatment_care_approach"),
	currentWhoStage: smallint("current_who_stage"),
	isStudySample: tinyint("is_study_sample").default(0).notNull(),
	barcode: varchar({ length: 250 }),
	originalPatientId: int("original_patient_id").default(0),
	barcode2: varchar({ length: 250 }),
	barcode3: varchar({ length: 250 }),
	barcode4: varchar({ length: 250 }),
	barcode5: varchar({ length: 250 }),
	sampleReceptionId: int("sample_reception_id"),
	trackingCodeId: int("tracking_code_id"),
	isDataEntered: tinyint("is_data_entered").default(0).notNull(),
	facilityReference: varchar("facility_reference", { length: 128 }),
	receptionArtNumber: varchar("reception_art_number", { length: 40 }),
	dataArtNumber: varchar("data_art_number", { length: 40 }),
	stage: tinyint(),
	requiredVerification: tinyint("required_verification").notNull(),
	// you can use { mode: 'date' }, if you want to have Date as type for this column
	currentRegimenInitiationDate: date("current_regimen_initiation_date", { mode: 'string' }),
	hieDataCreatedAt: datetime("hie_data_created_at", { mode: 'string'}),
	studyId: int("study_id"),
	receivedById: int("received_by_id"),
	studyParticipantId: int("study_participant_id"),
	sourceSystem: int("source_system"),
	durationOnCurrentTxt: tinyint("duration_on_current_txt"),
	dateCentrifuged: datetime("date_centrifuged", { mode: 'string'}),
	patientPhoneNumber: varchar("patient_phone_number", { length: 20 }),
	// you can use { mode: 'date' }, if you want to have Date as type for this column
	requestedOn: date("requested_on", { mode: 'string' }),
	onlySampleReceived: tinyint("only_sample_received"),
	agentId: varchar("agent_id", { length: 255 }),
});
